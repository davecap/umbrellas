import os
from configobj import ConfigObj, flatten_errors
from validate import Validator

CONFIG_SPEC = """# Umbrellas Config File

# Title for this ensemble
title = string(default='My Ensemble')
# Path to replicas DB file, relative to this config file
replicadb = string(default='replicas.db')
# Debug mode
debug = boolean(default=False)

[reaction]
    # Choose one type. Custom (subclassing support) types coming soon!
    type = option('Distance', 'Angle', 'Dihedral', default='Distance')
    # Target residue selection
    target = string(default='resname POT and resid 1')
    
    # Distance reaction coordinate: reference residue selection
    reference = string(default='')
    # Distance components. Can be any combination of xyz (ie: x or xy, or z, etc...)
    components = string(default='xyz')
    
    # Angle and Dihedral reaction coordinates: atom selections
    atoms = string_list(min=0, default=list())

"""

REPLICA_DB_SPEC = """# Replica DB
# AUTOGENERATED - EDIT AT YOUR OWN RISK

[replicas]
    [[__many__]]
        path = string(default='')
        k = float()
        coordinate = float()
        enabled = boolean(default=True)

"""

def _setup(path, spec, create=False):
    # validate the config
    config = ConfigObj(path, configspec=spec.split("\n"))
    validator = Validator()

    # create config file with defaults if necessary
    if create and not os.path.exists(path):
        config.validate(validator, copy=True)
        config.filename = path
        config.write()
    else:
        result = config.validate(validator, preserve_errors=True)
        # show config errors if there are any
        if type(result) is dict:
            for entry in flatten_errors(config, result):
                section_list, key, error = entry
                if key is not None:
                   section_list.append(key)
                else:
                    section_list.append('[missing section]')
                section_string = ' -> '.join(section_list)
                if error == False:
                    error = 'Missing value or section.'
                print section_string, ' = ', error
            raise Exception('Errors in config file')
    return config
    
def setup_replicadb(path='replicas.db', spec=REPLICA_DB_SPEC, create=False):
    return _setup(path,spec,create)

def setup_config(path='config.ini', spec=CONFIG_SPEC, create=False):
    return _setup(path,spec,create)
